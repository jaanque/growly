/* Navbar base styles */
.site-navbar {
  background-color: #ffffff; /* White background */
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 60px; /* Slim navbar height */
  z-index: 1000; /* Ensure it's above other content */
  display: flex;
  align-items: center; /* Vertically center content */
  padding: 0 20px; /* Horizontal padding */
}

.navbar-container {
  width: 100%;
  max-width: 1200px; /* Optional: constrain width like other sections */
  margin: 0 auto; /* Center container if max-width is used */
  display: flex;
  justify-content: flex-start; /* Align items to the start */
  align-items: center;
}

.navbar-logo-placeholder {
  /* This container might need some flex properties if the logo isn't centered by default,
     or to control its size relative to the navbar height.
     For now, assuming the img itself will control its size. */
  display: flex; /* Helps in vertical alignment if needed */
  align-items: center;
  height: 100%; /* Take full height of navbar for alignment */
}

.navbar-logo {
  height: 40px; /* Adjust size as needed, should be smaller than hero logo */
  width: auto;
  object-fit: contain;
  opacity: 0; /* Start hidden */
  transform: scale(0.8); /* Start slightly smaller */
  transition: opacity 0.3s ease, transform 0.3s ease;
  /* Add a delay if needed to sync with Hero logo fade out, e.g., transition-delay: 0.1s; */
}

/* This class would be added by JS when isLogoInNavbar is true,
   but since Navbar.js directly renders the img when true,
   we can just style .navbar-logo to be visible when it's in the DOM.
   The conditional rendering in JS and this CSS handles the appear effect.
   So, if isLogoInNavbar is true, the img is rendered, and its default state is opacity 0,
   then we need a class to make it visible, or change the logic.

   Let's adjust: The logo is IN the DOM when isLogoInNavbar is true.
   Its initial styles are opacity 0. We want it to transition to opacity 1.
   This can be done by triggering a style change shortly after it's mounted,
   or by having an "active" class.

   A simpler way for now: The transition will play when it's inserted.
   We need to ensure its final state (opacity 1, scale 1) is defined
   when it *should* be visible.
   The conditional rendering in Navbar.js already handles its presence.
   The animation will occur when it's added to the DOM if its target state
   is opacity 1 / scale 1 and initial state is opacity 0 / scale 0.8.

   Let's refine the Navbar.js to toggle a class for the animation instead.
   No, the current React conditional rendering is fine.
   The issue is that the transition applies on first render.
   We need to ensure the *target* styles are what we want, and the *initial* styles are set up for transition.
   The current .navbar-logo defines the "animated-in" state.
   Let's re-think.
*/

/* Simpler: When the logo is rendered by React, it will have these styles.
   If we want it to animate in, its "base" style should be visible,
   and a class is added to trigger the animation, or its initial state is "out"
   and it transitions to "in".
   Let's assume the transition on .navbar-logo will play when it's added to the DOM
   if its "final" (styled) state is different from its "initial" (from-nothing) state.
   This is often tricky with just CSS and conditional rendering.

   Alternative: Two logos, one in Hero, one in Navbar.
   Hero logo: .App-logo. When scrolled: .App-logo-scrolled (opacity 0, scale 0.5)
   Navbar logo: .navbar-logo. Initially hidden. When scrolled: .navbar-logo-visible (opacity 1, scale 1)

   Let's stick to the current structure and assume the transition on .navbar-logo
   will make it appear smoothly. We need to ensure it transitions *to* opacity 1 and scale 1.
*/

.navbar-logo.visible { /* We'll add this class in Navbar.js */
  opacity: 1;
  transform: scale(1);
}


.nav-links {
  list-style: none;
  margin: 0 auto; /* Auto margins to center in available space */
  padding: 0;
  display: flex;
  gap: 20px; /* Space between links */
}

.nav-links li a {
  color: #333; /* Standard link color */
  text-decoration: none;
  font-weight: 500;
  padding: 10px 15px; /* Padding for clickable area */
  border-radius: 4px; /* Subtle rounding */
  transition: color 0.3s ease, background-color 0.3s ease;
}

/* Hover effect matching the footer */
.nav-links li a:hover,
.nav-links li a.active { /* Style for active link (optional) */
  color: #628B00; /* Site's green color */
  text-decoration: underline; /* Underline like footer */
  /* background-color: #f0f0f0; /* Optional: slight background on hover */
}

/* Responsive adjustments (basic for now) */
@media (max-width: 768px) {
  .site-navbar {
    height: 50px; /* Slightly smaller on mobile */
    padding: 0 15px;
  }

  .nav-links {
    gap: 10px; /* Reduced gap */
  }

  .nav-links li a {
    padding: 8px 10px;
    font-size: 0.9rem; /* Slightly smaller font on mobile */
  }
}

@media (max-width: 480px) {
    /* On very small screens, links might need to be icons or a hamburger menu.
       For now, let them wrap or reduce further if needed.
       This example just reduces padding further. */
  .nav-links li a {
    padding: 6px 8px;
    font-size: 0.85rem;
  }
  .nav-links {
    /* Enable wrapping if links don't fit */
    flex-wrap: wrap;
    justify-content: center;
  }
}
